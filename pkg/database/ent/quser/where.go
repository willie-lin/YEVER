// Code generated by entc, DO NOT EDIT.

package quser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/YEVER/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Qq applies equality check predicate on the "qq" field. It's identical to QqEQ.
func Qq(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQq), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// QqEQ applies the EQ predicate on the "qq" field.
func QqEQ(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQq), v))
	})
}

// QqNEQ applies the NEQ predicate on the "qq" field.
func QqNEQ(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQq), v))
	})
}

// QqIn applies the In predicate on the "qq" field.
func QqIn(vs ...string) predicate.Quser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQq), v...))
	})
}

// QqNotIn applies the NotIn predicate on the "qq" field.
func QqNotIn(vs ...string) predicate.Quser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQq), v...))
	})
}

// QqGT applies the GT predicate on the "qq" field.
func QqGT(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQq), v))
	})
}

// QqGTE applies the GTE predicate on the "qq" field.
func QqGTE(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQq), v))
	})
}

// QqLT applies the LT predicate on the "qq" field.
func QqLT(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQq), v))
	})
}

// QqLTE applies the LTE predicate on the "qq" field.
func QqLTE(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQq), v))
	})
}

// QqContains applies the Contains predicate on the "qq" field.
func QqContains(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQq), v))
	})
}

// QqHasPrefix applies the HasPrefix predicate on the "qq" field.
func QqHasPrefix(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQq), v))
	})
}

// QqHasSuffix applies the HasSuffix predicate on the "qq" field.
func QqHasSuffix(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQq), v))
	})
}

// QqEqualFold applies the EqualFold predicate on the "qq" field.
func QqEqualFold(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQq), v))
	})
}

// QqContainsFold applies the ContainsFold predicate on the "qq" field.
func QqContainsFold(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQq), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Quser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Quser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Quser) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Quser) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Quser) predicate.Quser {
	return predicate.Quser(func(s *sql.Selector) {
		p(s.Not())
	})
}
