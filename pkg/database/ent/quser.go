// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/YEVER/pkg/database/ent/quser"
)

// Quser is the model entity for the Quser schema.
type Quser struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Qq holds the value of the "qq" field.
	Qq string `json:"qq,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case quser.FieldID, quser.FieldQq, quser.FieldPhone:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Quser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quser fields.
func (q *Quser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				q.ID = value.String
			}
		case quser.FieldQq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qq", values[i])
			} else if value.Valid {
				q.Qq = value.String
			}
		case quser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				q.Phone = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Quser.
// Note that you need to call Quser.Unwrap() before calling this method if this Quser
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quser) Update() *QuserUpdateOne {
	return (&QuserClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Quser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quser) Unwrap() *Quser {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quser is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quser) String() string {
	var builder strings.Builder
	builder.WriteString("Quser(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", qq=")
	builder.WriteString(q.Qq)
	builder.WriteString(", phone=")
	builder.WriteString(q.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// Qusers is a parsable slice of Quser.
type Qusers []*Quser

func (q Qusers) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
