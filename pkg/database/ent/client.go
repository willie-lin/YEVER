// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/willie-lin/YEVER/pkg/database/ent/migrate"

	"github.com/willie-lin/YEVER/pkg/database/ent/image"
	"github.com/willie-lin/YEVER/pkg/database/ent/quser"
	"github.com/willie-lin/YEVER/pkg/database/ent/user"
	"github.com/willie-lin/YEVER/pkg/database/ent/wuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// Quser is the client for interacting with the Quser builders.
	Quser *QuserClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Wuser is the client for interacting with the Wuser builders.
	Wuser *WuserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Image = NewImageClient(c.config)
	c.Quser = NewQuserClient(c.config)
	c.User = NewUserClient(c.config)
	c.Wuser = NewWuserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Image:  NewImageClient(cfg),
		Quser:  NewQuserClient(cfg),
		User:   NewUserClient(cfg),
		Wuser:  NewWuserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config: cfg,
		Image:  NewImageClient(cfg),
		Quser:  NewQuserClient(cfg),
		User:   NewUserClient(cfg),
		Wuser:  NewWuserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Image.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Image.Use(hooks...)
	c.Quser.Use(hooks...)
	c.User.Use(hooks...)
	c.Wuser.Use(hooks...)
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Create returns a create builder for Image.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id int) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImageClient) DeleteOneID(id int) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id int) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id int) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// QuserClient is a client for the Quser schema.
type QuserClient struct {
	config
}

// NewQuserClient returns a client for the Quser from the given config.
func NewQuserClient(c config) *QuserClient {
	return &QuserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quser.Hooks(f(g(h())))`.
func (c *QuserClient) Use(hooks ...Hook) {
	c.hooks.Quser = append(c.hooks.Quser, hooks...)
}

// Create returns a create builder for Quser.
func (c *QuserClient) Create() *QuserCreate {
	mutation := newQuserMutation(c.config, OpCreate)
	return &QuserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Quser entities.
func (c *QuserClient) CreateBulk(builders ...*QuserCreate) *QuserCreateBulk {
	return &QuserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Quser.
func (c *QuserClient) Update() *QuserUpdate {
	mutation := newQuserMutation(c.config, OpUpdate)
	return &QuserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuserClient) UpdateOne(q *Quser) *QuserUpdateOne {
	mutation := newQuserMutation(c.config, OpUpdateOne, withQuser(q))
	return &QuserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuserClient) UpdateOneID(id string) *QuserUpdateOne {
	mutation := newQuserMutation(c.config, OpUpdateOne, withQuserID(id))
	return &QuserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quser.
func (c *QuserClient) Delete() *QuserDelete {
	mutation := newQuserMutation(c.config, OpDelete)
	return &QuserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *QuserClient) DeleteOne(q *Quser) *QuserDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *QuserClient) DeleteOneID(id string) *QuserDeleteOne {
	builder := c.Delete().Where(quser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuserDeleteOne{builder}
}

// Query returns a query builder for Quser.
func (c *QuserClient) Query() *QuserQuery {
	return &QuserQuery{
		config: c.config,
	}
}

// Get returns a Quser entity by its id.
func (c *QuserClient) Get(ctx context.Context, id string) (*Quser, error) {
	return c.Query().Where(quser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuserClient) GetX(ctx context.Context, id string) *Quser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QuserClient) Hooks() []Hook {
	return c.hooks.Quser
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// WuserClient is a client for the Wuser schema.
type WuserClient struct {
	config
}

// NewWuserClient returns a client for the Wuser from the given config.
func NewWuserClient(c config) *WuserClient {
	return &WuserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wuser.Hooks(f(g(h())))`.
func (c *WuserClient) Use(hooks ...Hook) {
	c.hooks.Wuser = append(c.hooks.Wuser, hooks...)
}

// Create returns a create builder for Wuser.
func (c *WuserClient) Create() *WuserCreate {
	mutation := newWuserMutation(c.config, OpCreate)
	return &WuserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wuser entities.
func (c *WuserClient) CreateBulk(builders ...*WuserCreate) *WuserCreateBulk {
	return &WuserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wuser.
func (c *WuserClient) Update() *WuserUpdate {
	mutation := newWuserMutation(c.config, OpUpdate)
	return &WuserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WuserClient) UpdateOne(w *Wuser) *WuserUpdateOne {
	mutation := newWuserMutation(c.config, OpUpdateOne, withWuser(w))
	return &WuserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WuserClient) UpdateOneID(id string) *WuserUpdateOne {
	mutation := newWuserMutation(c.config, OpUpdateOne, withWuserID(id))
	return &WuserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wuser.
func (c *WuserClient) Delete() *WuserDelete {
	mutation := newWuserMutation(c.config, OpDelete)
	return &WuserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WuserClient) DeleteOne(w *Wuser) *WuserDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WuserClient) DeleteOneID(id string) *WuserDeleteOne {
	builder := c.Delete().Where(wuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WuserDeleteOne{builder}
}

// Query returns a query builder for Wuser.
func (c *WuserClient) Query() *WuserQuery {
	return &WuserQuery{
		config: c.config,
	}
}

// Get returns a Wuser entity by its id.
func (c *WuserClient) Get(ctx context.Context, id string) (*Wuser, error) {
	return c.Query().Where(wuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WuserClient) GetX(ctx context.Context, id string) *Wuser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WuserClient) Hooks() []Hook {
	return c.hooks.Wuser
}
